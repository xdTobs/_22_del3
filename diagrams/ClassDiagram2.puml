@startuml
hide empty members
skinparam linetype ortho
left to right direction
skinparam nodesep 25
skinparam ranksep 15

package entities{
    class ChanceCardImpl {
        ~ GameBoard gameBoard
        + void getOutOfJail()
        + void changeBalance(int)
        + void moveToField(int)
        + void payPerProperty(int,int)
    }
    class GameBoard {
        - Deck deckOfCards
        - UserIO userIO
        + void fieldAction(Player)
        + boolean rollDieMovePlayer()
        + boolean isGameover()
    }

    class Player {
        + boolean isJailed()
        + double totalValue()
    }
    class DiceCup {
        + int getSum()
        + boolean diceAreEqual()
        + int[] getDiceValues()
        + void roll()
    }
    class FieldImpl {
	~ GameBoard gameBoard
	+ Field streetAction(Street)
    }

    package chancecards {
        class Deck {
            -ChanceCard[] cards
            + void pullCard()
        }
        interface ChanceAction {
            ~ void getOutOfJail()
            ~ void changeBal(int)
            ~ void moveToField(int)
            ~ void payPerProperty(int,int)
        }
        abstract class ChanceCard {
            # String desc
            + {abstract}void executeCardAction(ChanceAction)
        }
    }
    package fields {
         abstract class Field {
            # FieldPair pair
            + {abstract}Field executeFieldAction(FieldAction)
        }
        class FieldPair {
            + int[] getFieldIds()
            + Color getBackgroundColor()
        }

        interface FieldAction {
            ~ Field streetAction(Street)
            ~ void streetPayRentToOwner(Street);
        }
    }
}


package language{
    class LanguageController {
        + String getMessage(String)
    }
}

package controller {
    class UserIO {
        ~ BasicUserIO basicUserIO
        + boolean promptYesOrNo(Message)
        + void showMessage(Message)
    }

    interface BasicUserIO {
        ~ int promptChoice(Message,Message)
        ~ void showMessage(Message)
    }

    class GameController {
        + void playGame()
        + void playTurn(Player)
    }
}
package view{
    class GuiView {
        + void update(Player[],Field[])
        + String promptPlayer(String[],String)
    }

    interface View {
        ~ void update(Player[],Field[])
        ~ String promptPlayer(String[],String)
    }
}


GameBoard <-- GameController


GameBoard --> ChanceCardImpl
GameBoard --> FieldImpl

Player -up[hidden]-> FieldImpl

GameBoard -left-> Player
GameBoard --> DiceCup
GameBoard --> UserIO

GameBoard -[norank]-> Deck
GuiView -[norank]-> LanguageController
Deck -[hidden]up-> LanguageController
ChanceCardImpl ..|>ChanceAction
FieldAction <|.. FieldImpl
View <|.left. GuiView
BasicUserIO <|.down. GuiView
UserIO <|.right. BasicUserIO
GameController --> View
GameController -left> UserIO
FieldAction <..Field
FieldPair <-up-Field
Deck  -right-> ChanceCard
ChanceAction <.left.ChanceCard

@enduml