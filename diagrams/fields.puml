@startuml

class FieldImpl{
    GameBoard gameBoard;
    UserIO userIO;
    + Field streetAction(Street street)
    + RentableField buyEmptyStreet(RentableField street)
    + void streetPayRentToOwner(Street street)
    + boolean streetPlayerOwnsPair(Street street)
    + void taxAction(Tax tax)
    + void goToJailAction(GoToJail goToJail)
    + void jailAction(Jail jail)
    + Field ferryAction(Ferry ferry)
    + void chanceFieldAction(ChanceField chanceField)
    + Field breweryAction(Brewery brewery)
    + void parkingAction()
}
' implements FieldAction {
hide empty members
package fields {
    class ChanceField {
        + Field executeFieldAction(FieldAction)
    }
    class Ferry {
        + Field executeFieldAction(FieldAction)
    }
    class GoToJail {
        + Field executeFieldAction(FieldAction)
    }
    class Jail {
        + Field executeFieldAction(FieldAction)
    }
    class Parking {
        + Field executeFieldAction(FieldAction)
    }
    class Start {
        + Field executeFieldAction(FieldAction)
    }
    class Tax {
        + Field executeFieldAction(FieldAction)
    }
    class Street {
        ~ int housePrice
        ~ int houses
        + void setHouses(int)
        + Field executeFieldAction(FieldAction)
    }
    class FieldPair {
        - Color backgroundColor
        - Color foregroundColor
        - int[] fieldIds
        + int[] getFieldIds()
        + Color getBackgroundColor()
        + Color getForegroundColor()
    }
    abstract class RentableField {
        ~ int[] rents
        ~ int price
        - Player owner
        ~ boolean pawned
        + void setOwner()
    }
    interface FieldAction {
        ~ Field streetAction(Street)
        ~ void streetPayRentToOwner(Street)
        ~ void taxAction(Tax)
        ~ void goToJailAction(GoToJail)
        ~ void jailAction(Jail)
        ~ Field ferryAction(Ferry)
        ~ void chanceFieldAction(ChanceField)
        ~ Field breweryAction(Brewery)
        ~ void parkingAction()
    }
    class Brewery {
        + int getRent(int)
        + Field executeFieldAction(FieldAction)
    }
    abstract class Field {
        - FieldPair pair
        - String name
        + FieldPair getPair()
        + void setPair(FieldPair)
        + {static} Field parse(String)
        + {abstract}Field executeFieldAction(FieldAction)
        + String getName()
    }
}

FieldImpl -[hidden]-> FieldPair

GoToJail -down[hidden]-> ChanceField
ChanceField -down[hidden]-> Start
Start -right[hidden]-> Jail
Jail -right[hidden]-> Parking
Parking -right[hidden]-> Tax

FieldImpl ..|> FieldAction
Field o-up- FieldPair
Field <|-left- GoToJail
Field <|-- ChanceField
Start -up-|> Field
Field <|- Jail
Field <|- Parking
Field <|-- Tax
Field <|-right- RentableField
RentableField <|-down- Ferry
RentableField <|-up- Street
RentableField <|-right- Brewery
@enduml
