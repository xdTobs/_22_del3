@startuml

class view.TestView {
+ void addPlayersToGui(Player[])
+ void updateDie(DiceCup)
+ void updatePlayerBalances(Player[])
+ void updatePlayerLocations(Player[])
+ void showMessage(String)
+ void update(Player[],Field[])
+ void updateHouses(Field[])
+ String promptPlayer(String[],String)
+ int promptPlayerCount(String,int,int)
}
interface view.view {
~ void addPlayersToGui(Player[])
~ void updateDie(DiceCup)
~ void updatePlayerBalances(Player[])
~ void updatePlayerLocations(Player[])
~ void showMessage(String)
~ void update(Player[],Field[])
~ void updateHouses(Field[])
~ String promptPlayer(String[],String)
~ int promptPlayerCount(String,int,int)
}

class entities.dicecup.DieSixSided {
- int max
+ void roll()
+ int getFaceValue()
}
interface enities.chancecards.ChanceAction {
~ void getOutOfJail()
~ void changeBal(int)
~ void changeBalConditional(int,int)
~ void changeBalFromPlayers(int)
~ void moveToField(int)
~ void moveSpaces(int)
~ void moveToFerry()
~ void payPerProperty(int,int)
~ void goToJail()
~ void moveToBrewery()
~ void printDesc(String)
}
class entities.GameBoard {
- DiceCup diceCup
- HashMap<Player,List<RentableField>> ownershipMap
- Field[] fields
- LanguageController languageController
- Deck deck
- Player[] players
- int playerTurn
- ActualChanceCard acc
- ActualFields fieldImpl
- void initFieldPairs()
+ void fieldAction(Player)
+ int totalPlayerValue(Player)
+ void resetPlayerPositions()
+ boolean currentPlayerIsOnChanceField()
+ boolean rollDieMovePlayer()
+ void nextPlayer()
+ boolean isGameover()
+ String findWinner()
+ String findLoser()
+ void createPlayers(int)
+ void isPlayerBankrupt()
- void removePlayer(int)
}
class entities.Player {
- int balance
- int position
- boolean jailed
- int getOutOfJailCards
- int jailedCounter
- int extraTurnCounter
- String name
+ boolean isJailed()
+ double totalValue()
}




class enities.chancecards.Deck {
- ArrayList<ChanceCard> cards
+ Integer[] numberReader(String)
+ void shuffleCards()
+ void pullCard()
+ ChanceCard getLatestChanceCard()
+ int getSize()
+ ArrayList<ChanceCard> getCards()
}

class entities.ChanceCardImpl {
~ GameBoard gameBoard
~ view view
+ void getOutOfJail()
+ void changeBal(int)
+ void changeBalConditional(int,int)
+ void changeBalFromPlayers(int)
+ void moveToField(int)
+ void moveSpaces(int)
+ void moveToFerry()
+ void payPerProperty(int,int)
+ void goToJail()
+ void moveToBrewery()
+ void printDesc(String)
}

abstract class entities.fields.Field {
- int position
- String name
# FieldPair pair
+ FieldPair getPair()
+ int getPosition()
# void parse(String)
+ {abstract}Field executeFieldAction(FieldAction)
+ String getName()
+ String getHTMLDescription()
+ void setPair(FieldPair)
}
class language.LanguageController {
- HashMap<String,String> languageMap
+ String getMessage(String)
- HashMap<String,String> initLanguageHandler(Path)
}
class entities.fields.FieldPair {
- Color backgroundColor
- Color foregroundColor
- int[] fieldIds
+ int[] getFieldIds()
+ Color getBackgroundColor()
+ Color getForegroundColor()
}
abstract class entities.dicecup.Die {
~ int faceValue
~ {abstract}void roll()
~ int getFaceValue()
+ boolean equals(Object)
}
abstract class entities.fields.RentableField {
~ int price
~ int housePrice
~ int houses
- int[] rent
- String ownerName
+ int getHouses()
+ void setHouses(int)
+ int getPrice()
+ int getHousePrice()
+ void BuyProperty()
+ int getRent(int)
+ String getOwner()
+ void setOwnerName(String)
}


class entities.dicecup.DiceCup {
- Die[] diceArray
+ int getSum()
+ boolean diceAreEqual()
+ int[] getDiceValues()
+ void roll()
}
class controller.GameController {
- view view
- GameBoard gameBoard
- ActualChanceCard acc
+ void playGame()
+ void resetPlayerPositions()
+ void playTurn(Player)
}



class view.GuiView {
- GUI gui
- GUI_Player[] guiPlayers
- GUI_Field[] guiFields
+ void addPlayersToGui(Player[])
+ void updateDie(DiceCup)
+ void updatePlayerBalances(Player[])
+ void updatePlayerLocations(Player[])
+ void showMessage(String)
+ void update(Player[],Field[])
+ void updateHouses(Field[])
+ String promptPlayer(String[],String)
+ int promptPlayerCount(String,int,int)
}


class entities.dicecup.TestDie {
~ void roll()
}
abstract class enities.chancecards.ChanceCard {
# String desc
+ {abstract}void executeCardAction(ChanceAction)
}
class entities.FieldImpl {
~ GameBoard gameBoard
~ view view
- boolean wantToBuyPrompt(RentableField)
+ Field streetAction(Street)
- void buyHouseProcess()
- void buyHouse(Street)
- boolean wantToBuyHouse()
+ RentableField buyEmptyStreet(RentableField)
+ void streetPayRentToOwner(Street)
+ boolean streetPlayerOwnsPair(Street)
+ void taxAction(Tax)
- boolean payPercentPrompt(Tax)
+ void goToJailAction(GoToJail)
+ Field ferryAction(Ferry)
- void ferryPayRent(Ferry)
+ int ferryPlayerOwns(Ferry)
+ void chanceFieldAction(ChanceField)
+ Field breweryAction(Brewery)
+ void breweryPayRent(Brewery)
}
class Main {
+ {static} void main(String[])
}

interface entities.fields.FieldAction {
~ Field streetAction(Street)
~ void streetPayRentToOwner(Street)
~ boolean streetPlayerOwnsPair(Street)
~ void taxAction(Tax)
~ void goToJailAction(GoToJail)
~ Field ferryAction(Ferry)
~ void chanceFieldAction(ChanceField)
~ Field breweryAction(Brewery)
}
class entities.fields.GoToJail {
+ Field executeFieldAction(FieldAction)
}


view.view <.. view.TestView


entities.dicecup.Die <-- entities.dicecup.DieSixSided
enities.chancecards.ChanceAction <.up. entities.ChanceCardImpl
entities.fields.FieldAction <.up. entities.FieldImpl
entities.fields.Field <-- entities.fields.RentableField
view.view <.. view.GuiView
entities.dicecup.Die <-- entities.dicecup.TestDie
controller.GameController --> view.view
controller.GameController --> entities.GameBoard
entities.GameBoard -->entities.dicecup
Main -->controller.GameController
entities.GameBoard -->language.LanguageController
@enduml
